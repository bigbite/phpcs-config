<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="BigBite" namespace="BigBiteCS\BigBite" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">
  <config name="encoding" value="utf-8" />
  <config name="testVersion" value="7.4-" />

  <arg name="extensions" value="php" />
  <arg name="parallel" value="75" />
  <arg name="report" value="full" />
  <arg name="report-width" value="150" />
  <arg name="tab-width" value="4" />
  <arg name="cache" />
  <arg value="qs" />

  <exclude-pattern>*/.git/*</exclude-pattern>
  <!-- WordPress site directories/files. -->
  <exclude-pattern>*/wp-activate.php</exclude-pattern>
  <exclude-pattern>*/wp-blog-header.php</exclude-pattern>
  <exclude-pattern>*/wp-comments-post.php</exclude-pattern>
  <exclude-pattern>*/wp-config-sample.php</exclude-pattern>
  <exclude-pattern>*/wp-config.php</exclude-pattern>
  <exclude-pattern>*/wp-cron.php</exclude-pattern>
  <exclude-pattern>*/wp-links-opml.php</exclude-pattern>
  <exclude-pattern>*/wp-load.php</exclude-pattern>
  <exclude-pattern>*/wp-login.php</exclude-pattern>
  <exclude-pattern>*/wp-mail.php</exclude-pattern>
  <exclude-pattern>*/wp-settings.php</exclude-pattern>
  <exclude-pattern>*/wp-signup.php</exclude-pattern>
  <exclude-pattern>*/wp-trackback.php</exclude-pattern>
  <exclude-pattern>*/mu-plugins/*</exclude-pattern>
  <exclude-pattern>*/private/*</exclude-pattern>
  <exclude-pattern>*/upgrade/*</exclude-pattern>
  <exclude-pattern>*/uploads/*</exclude-pattern>
  <exclude-pattern>*/wp-admin/*</exclude-pattern>
  <exclude-pattern>*/wp-content/advanced-cache.php</exclude-pattern>
  <exclude-pattern>*/wp-content/db.php</exclude-pattern>
  <exclude-pattern>*/wp-content/object-cache.php</exclude-pattern>
  <exclude-pattern>*/wp-includes/*</exclude-pattern>
  <exclude-pattern>xmlrpc.php</exclude-pattern>
  <!-- Test directories. -->
  <exclude-pattern>*/tests/*</exclude-pattern>
  <exclude-pattern>*/cypress/*</exclude-pattern>
  <!-- Package directories. -->
  <exclude-pattern>*/node_modules/*</exclude-pattern>
  <exclude-pattern>*/vendor/*</exclude-pattern>
  <!-- Local files. -->
  <exclude-pattern>*/vip-config/env-local-config.php</exclude-pattern>
  <!-- Built asset files from @wordpress/scripts. -->
  <exclude-pattern>*/build/*.asset.php</exclude-pattern>
  <!-- Built asset files from Build Tools. -->
  <exclude-pattern>*/dist/*.asset.php</exclude-pattern>

  <!-- Use all of WP's ruleset, barring docs, and other rules that don't make sense for us. -->
  <rule ref="WordPress-Extra">
    <!-- Don't enforce long-form array syntax; we use short arrays exclusively. -->
    <exclude name="Universal.Arrays.DisallowShortArraySyntax.Found" />
    <!-- For consistency, allow a blank line before the class closing brace -->
    <exclude name="PSR2.Classes.ClassDeclaration.CloseBraceAfterBody" />
    <!-- We have our own file name sniff - WP doesn't account for abstract classes -->
    <exclude name="WordPress.Files.FileName" />
    <!-- Shorthand ternaries can be okay - should be checked at PR review time -->
    <exclude name="Universal.Operators.DisallowShortTernary.Found" />
    <!-- Don't cause build failures out of spite -->
    <exclude name="WordPress.WP.CapitalPDangit.Misspelled" />
  </rule>

  <!-- Use all of WP VIP's ruleset. -->
  <rule ref="WordPress-VIP-Go" />

  <!-- ################ -->
  <!-- Additional rules -->
  <!-- ################ -->

  <!-- Disallow closures longer than 5 (warn) or 8 (error) lines long -->
  <rule ref="Universal.FunctionDeclarations.NoLongClosures" />
  <!-- Enforce non-private, non-abstract methods in traits to be declared as final -->
  <rule ref="Universal.FunctionDeclarations.RequireFinalMethodsInTraits" />
  <!-- Enforce the use of the boolean && and || operators instead of the logical and/or operators -->
  <rule ref="Universal.Operators.DisallowLogicalAndOr" />

  <!-- Warn about unused function parameters -->
  <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter">
    <!-- Except under circumstances in which they make sense. -->
    <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundBeforeLastUsed" />
    <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInExtendedClassBeforeLastUsed" />
    <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterfaceAfterLastUsed" />
    <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterfaceBeforeLastUsed" />
  </rule>
  <!-- Include documentation sniff from WordPress-Docs -->
  <rule ref="Generic.Commenting.DocComment">
    <!-- Allow other tags to come before @param comments - @see, @link, etc. -->
    <exclude name="Generic.Commenting.DocComment.ParamNotFirst" />
  </rule>
  <!-- Warn when there's todo/fixme notations -->
  <rule ref="Generic.Commenting.Todo" />
  <rule ref="Generic.Commenting.Fixme" />
  <!-- See: McCabe's Cyclomatic Complexity -->
  <rule ref="Generic.Metrics.CyclomaticComplexity" />
  <!-- Limit nesting levels to 5. -->
  <rule ref="Generic.Metrics.NestingLevel" />
  <!-- Warn about delete/sizeof. -->
  <rule ref="Generic.PHP.ForbiddenFunctions" />
  <!-- Ensure no space after spread operator. -->
  <rule ref="Generic.WhiteSpace.SpreadOperatorSpacingAfter" />

  <!-- Enforce wp-style spaces between parens. -->
  <rule ref="PEAR.Functions.FunctionCallSignature.SpaceAfterOpenBracket" />
  <rule ref="PEAR.Functions.FunctionCallSignature.SpaceBeforeCloseBracket" />
  <!-- Ensure default values are assigned in functions/methods. -->
  <rule ref="PEAR.Functions.ValidDefaultValue" />
  <!-- Ensure multi-line objects/method-chains are indented. -->
  <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent" />
  <!-- Check that the closing braces of scopes are aligned correctly. -->
  <rule ref="PEAR.WhiteSpace.ScopeClosingBrace" />

  <!-- Include documentation sniffs from WordPress-Docs. -->
  <rule ref="Squiz.Commenting.BlockComment">
    <!-- We do not like empty lines after block comments. -->
    <exclude name="Squiz.Commenting.BlockComment.NoEmptyLineAfter" />
    <!-- Allow for /* translators: ... */ comments. -->
    <exclude name="Squiz.Commenting.BlockComment.SingleLine" />
    <!-- Uses spaces for indentation. -->
    <exclude name="Squiz.Commenting.BlockComment.FirstLineIndent" />
    <exclude name="Squiz.Commenting.BlockComment.LineIndent" />
    <exclude name="Squiz.Commenting.BlockComment.LastLineIndent" />
  </rule>
  <rule ref="Squiz.Commenting.ClassComment" />
  <rule ref="Squiz.Commenting.DocCommentAlignment" />
  <rule ref="Squiz.Commenting.EmptyCatchComment" />
  <rule ref="Squiz.Commenting.FunctionComment">
    <!-- We prefer shorthand int/bool over integer/boolean. -->
    <exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName" />
    <exclude name="Squiz.Commenting.FunctionComment.InvalidReturn" />
    <!-- Be slightly less aggressive about DocBlock formatting. -->
    <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop" />
    <exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop" />
    <exclude name="Squiz.Commenting.FunctionComment.ThrowsNotCapital" />
  </rule>
  <rule ref="Squiz.Commenting.FunctionCommentThrowTag" />
  <rule ref="Squiz.Commenting.InlineComment">
    <!-- Allow inline docblocks. -->
    <exclude name="Squiz.Commenting.InlineComment.DocBlock" />
    <!-- Don't enforce a period at the end of comments. -->
    <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar" />
    <!-- Allow "translators:" comments. -->
    <exclude name="Squiz.Commenting.InlineComment.NotCapital" />
  </rule>
  <rule ref="Squiz.Commenting.PostStatementComment" />
  <rule ref="Squiz.Commenting.VariableComment">
    <!-- We prefer shorthand int/bool over integer/boolean. -->
    <exclude name="Squiz.Commenting.VariableComment.IncorrectVarType" />
  </rule>
  <!-- Force debug output function calls to error. -->
  <rule ref="Squiz.PHP.DiscouragedFunctions">
    <properties>
      <property name="error" value="true" />
    </properties>
  </rule>
  <!-- Disallow nested functions (except within closures). -->
  <rule ref="Squiz.PHP.InnerFunctions" />
  <!-- Ensure inbuilt PHP functions are lowercase. -->
  <rule ref="Squiz.PHP.LowercasePHPFunctions" />
  <!-- Ensure class properties have scoping operators (public/protected/private). -->
  <rule ref="Squiz.Scope.MemberVarScope" />
  <!-- Ensure class methods have scoping operators. -->
  <rule ref="Squiz.Scope.MethodScope" />
  <!-- Don't allow usage of $this in static methods. -->
  <rule ref="Squiz.Scope.StaticThisUsage" />
  <!-- Prevent empty lines between function declaration and body. -->
  <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace" />
  <!-- Normalise whitespace around logical operators. -->
  <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing" />
  <!-- Normalise whitespace around class properties. -->
  <rule ref="Squiz.WhiteSpace.MemberVarSpacing" />
  <!-- Normalise whitespace around class properties. -->
  <rule ref="Squiz.WhiteSpace.PropertyLabelSpacing" />

  <!-- Ensure use statements are correct. -->
  <rule ref="PSR2.Namespaces.UseDeclaration" />

  <!-- Validate anonymous class declarations. -->
  <rule ref="PSR12.Classes.AnonClassDeclaration">
    <exclude name="PSR12.Classes.AnonClassDeclaration.SpaceAfterKeyword" />
  </rule>
  <!-- Ensure closing braces are the only content on a line. -->
  <rule ref="PSR12.Classes.ClosingBrace" />
  <!-- Ensure boolean operators are consistently placed. -->
  <rule ref="PSR12.ControlStructures.BooleanOperatorPlacement" />
  <!-- Validate declare statements. -->
  <rule ref="PSR12.Files.DeclareStatement">
    <!-- Don't error with spacing between parens or operators. -->
    <exclude name="PSR12.Files.DeclareStatement.SpaceFoundAfterDirective" />
    <exclude name="PSR12.Files.DeclareStatement.SpaceFoundAfterDirectiveValue" />
    <exclude name="PSR12.Files.DeclareStatement.SpaceFoundBeforeDirective" />
    <exclude name="PSR12.Files.DeclareStatement.SpaceFoundBeforeDirectiveValue" />
  </rule>
  <!-- Validate format of file headers (when present). -->
  <rule ref="PSR12.Files.FileHeader">
    <!-- Disable assumption that the first comment in a file is a file comment. -->
    <exclude name="PSR12.Files.FileHeader.SpacingAfterBlock" />
  </rule>
  <!-- Validate import statements. -->
  <rule ref="PSR12.Files.ImportStatement" />
  <!-- Prevent short opening PHP tag. -->
  <rule ref="PSR12.Files.OpenTag" />
  <!-- Prevent overly-enthusiastic use of compound namespaces. -->
  <rule ref="PSR12.Namespaces.CompoundNamespaceDepth" />
  <!-- Ensure class constants have scoping operators. -->
  <rule ref="PSR12.Properties.ConstantVisibility" />
  <!-- Validate use statements. -->
  <rule ref="PSR12.Traits.UseDeclaration">
    <!-- Allow a blank line before the first use statement within a class. -->
    <exclude name="PSR12.Traits.UseDeclaration.UseAfterBrace" />
  </rule>
</ruleset>
